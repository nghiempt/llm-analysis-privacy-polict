Case 01: ask gpt-3.5-turbo to get answer (zero-shot)
- step 01: run file zero-shot.py with data 150-test-none.csv, after we get file 150-test-zr.csv.
- step 02: run file process-outcome.py with data 150-test-zr.csv to format output to each column csv, after we get file 150-test-zr-process.csv.
- step 03: run file evaluation.ipynb to compare value between actual and predict, after we get the matric and save in file report.txt.

Case 02: fine-tuning gpt-3.5-turbo with manual data
- step 01: run file convert-csv-to-json.py with data 150-train-actual.csv to transfer data from csv to json format.
- step 02: run file convert-json-to-jsonl to convert previous file json to jsonl (fine tune need jsonl format).
- step 03: fine-tuning (we use Postman to call api openai for this process), after we get the model ID fine tuned with our data.
- step 04: run file test-fine-tuned-model.py with model ID fine tuned and data 150-test-none.csv, after we get file 150-test-ft.csv.
- step 05: run file process-outcome.py with data 150-test-ft.csv to format output to each column csv, after we get file 150-test-ft-process.csv.
- step 06: run file evaluation.ipynb to compare value between actual and predict, after we get the matric and save in file report.txt.

Case 03: fine-tuning gpt-3.5-turbo with data labeled by LLM (gpt-4)
- step 01: run file llm-label.py with data 150-train-need.csv to get label by LLM, after we get file 150-train-llm.csv.
- step 02: run file process-outcome-label.py with data 150-train-llm.csv to format output to each column csv, after we get file 150-train-llm-process.csv.
- step 03: run file convert-csv-to-json.py with data 150-train-llm-process.csv to transfer data from csv to json format.
- step 04: run file convert-json-to-jsonl to convert previous file json to jsonl (fine tune need jsonl format).
- step 05: fine-tuning (we use Postman to call api openai for this process), after we get the model ID fine tuned with our data.
- step 06: run file test-fine-tuned-model.py with model ID fine tuned and data 150-test-none.csv, after we get file 150-test-ft.csv.
- step 07: run file process-outcome-ft.py with data 150-test-ft.csv to format output to each column csv, after we get file 150-test-ft-process.csv.
- step 08: run file evaluation.ipynb to compare value between actual and predict, after we get the matric and save in file report.txt.

Case 04: fine-tuning gpt-3.5-turbo with data labeled by LLM (gpt-4o)
- step 01: run file llm-label.py with data 150-train-need.csv to get label by LLM, after we get file 150-train-llm.csv.
- step 02: run file process-outcome-label.py with data 150-train-llm.csv to format output to each column csv, after we get file 150-train-llm-process.csv.
- step 03: run file convert-csv-to-json.py with data 150-train-llm-process.csv to transfer data from csv to json format.
- step 04: run file convert-json-to-jsonl to convert previous file json to jsonl (fine tune need jsonl format).
- step 05: fine-tuning (we use Postman to call api openai for this process), after we get the model ID fine tuned with our data.
- step 06: run file test-fine-tuned-model.py with model ID fine tuned and data 150-test-none.csv, after we get file 150-test-ft.csv.
- step 07: run file process-outcome-ft.py with data 150-test-ft.csv to format output to each column csv, after we get file 150-test-ft-process.csv.
- step 08: run file evaluation.ipynb to compare value between actual and predict, after we get the matric and save in file report.txt.

Case 05: fine-tuning gpt-3.5-turbo with data labeled by LLM (gemini-1.5)
- step 01: run file llm-label.py with data 150-train-need.csv to get label by LLM, after we get file 150-train-llm.csv.
- step 02: run file process-outcome-label.py with data 150-train-llm.csv to format output to each column csv, after we get file 150-train-llm-process.csv.
- step 03: run file convert-csv-to-json.py with data 150-train-llm-process.csv to transfer data from csv to json format.
- step 04: run file convert-json-to-jsonl to convert previous file json to jsonl (fine tune need jsonl format).
- step 05: fine-tuning (we use Postman to call api openai for this process), after we get the model ID fine tuned with our data.
- step 06: run file test-fine-tuned-model.py with model ID fine tuned and data 150-test-none.csv, after we get file 150-test-ft.csv.
- step 07: run file process-outcome-ft.py with data 150-test-ft.csv to format output to each column csv, after we get file 150-test-ft-process.csv.
- step 08: run file evaluation.ipynb to compare value between actual and predict, after we get the matric and save in file report.txt.

Case 06: fine-tuning gpt-3.5-turbo with data labeled by LLM (gpt-4)
- step 01: run file llm-label.py with data 450-train-need.csv to get label by LLM, after we get file 450-train-llm.csv.
- step 02: run file process-outcome-label.py with data 450-train-llm.csv to format output to each column csv, after we get file 450-train-llm-process.csv.
- step 03: run file convert-csv-to-json.py with data 450-train-llm-process.csv to transfer data from csv to json format.
- step 04: run file convert-json-to-jsonl to convert previous file json to jsonl (fine tune need jsonl format).
- step 05: fine-tuning (we use Postman to call api openai for this process), after we get the model ID fine tuned with our data.
- step 06: run file test-fine-tuned-model.py with model ID fine tuned and data 150-test-none.csv, after we get file 150-test-ft.csv.
- step 07: run file process-outcome-ft.py with data 150-test-ft.csv to format output to each column csv, after we get file 150-test-ft-process.csv.
- step 08: run file evaluation.ipynb to compare value between actual and predict, after we get the matric and save in file report.txt.

Case 07: fine-tuning gpt-3.5-turbo with data labeled by LLM (gpt-4o)
- step 01: run file llm-label.py with data 450-train-need.csv to get label by LLM, after we get file 450-train-llm.csv.
- step 02: run file process-outcome-label.py with data 450-train-llm.csv to format output to each column csv, after we get file 450-train-llm-process.csv.
- step 03: run file convert-csv-to-json.py with data 450-train-llm-process.csv to transfer data from csv to json format.
- step 04: run file convert-json-to-jsonl to convert previous file json to jsonl (fine tune need jsonl format).
- step 05: fine-tuning (we use Postman to call api openai for this process), after we get the model ID fine tuned with our data.
- step 06: run file test-fine-tuned-model.py with model ID fine tuned and data 150-test-none.csv, after we get file 150-test-ft.csv.
- step 07: run file process-outcome-ft.py with data 150-test-ft.csv to format output to each column csv, after we get file 150-test-ft-process.csv.
- step 08: run file evaluation.ipynb to compare value between actual and predict, after we get the matric and save in file report.txt.

Case 08: fine-tuning gpt-3.5-turbo with data labeled by LLM (gemini-1.5)
- step 01: run file llm-label.py with data 450-train-need.csv to get label by LLM, after we get file 450-train-llm.csv.
- step 02: run file process-outcome-label.py with data 450-train-llm.csv to format output to each column csv, after we get file 450-train-llm-process.csv.
- step 03: run file convert-csv-to-json.py with data 450-train-llm-process.csv to transfer data from csv to json format.
- step 04: run file convert-json-to-jsonl to convert previous file json to jsonl (fine tune need jsonl format).
- step 05: fine-tuning (we use Postman to call api openai for this process), after we get the model ID fine tuned with our data.
- step 06: run file test-fine-tuned-model.py with model ID fine tuned and data 150-test-none.csv, after we get file 150-test-ft.csv.
- step 07: run file process-outcome-ft.py with data 150-test-ft.csv to format output to each column csv, after we get file 150-test-ft-process.csv.
- step 08: run file evaluation.ipynb to compare value between actual and predict, after we get the matric and save in file report.txt.